dist: bionic
os: linux
language: php
php:
  - 7.2
services:
  - docker
branches:
  only:
    - master
    - develop
env:
  DOCKER_COMPOSE_VERSION: 1.25.4
  IMAGE_NAME: flask-tdd-docker
  IMAGE_TAG: flask-tdd-docker
  GITLAB_REGISTRY_IMAGE: registry.gitlab.com
  HEROKU_REGISTRY_IMAGE: registry.heroku.com/$HEROKU_APP_NAME/web

# the following line is needed to enable the TravisCI build conditions
conditions: v1

stages:
  - name: Docker Compose Tests
    if: type != api AND branch != master
    # Run on every pull request against develop
    # Run on push against develop

  - name: Docker Image Tests
    if: (type = pull_request OR type = cron) AND branch = master
    # Run on every pull request against master
    # Run on CRON tests

  - name: Deploy to Heroku
    if: (type != pull_request AND type != cron) AND branch = master
    # Run after merging into master. No test

jobs:
  include:
    - stage: Docker Compose Tests
      before_install: |
        sudo rm /usr/local/bin/docker-compose;
        curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose;
        chmod +x docker-compose;
        sudo mv docker-compose /usr/local/bin;
      before_script: |
        rm Dockerfile;
        cp Dockerfile.travis Dockerfile;
        rm Dockerfile.travis;
        docker-compose up -d --build;
      script: |
        docker-compose exec users python -m pytest "project/tests" --cov="project";
        docker-compose exec users black project;
        docker-compose exec users flake8 project;
        docker-compose exec users isort project/**/*.py --check-only;
      after_success: |
        docker-compose exec -e TRAVIS -e TRAVIS_JOB_ID -e TRAVIS_BRANCH -e TRAVIS_PULL_REQUEST users coveralls;
        docker-compose exec -e TRAVIS -e TRAVIS_JOB_ID -e TRAVIS_BRANCH -e TRAVIS_PULL_REQUEST users codecov --token=${CODECOV_TOKEN};
        docker-compose stop;
        docker-compose down -v;

    - stage: Docker Image Tests
      before_script: |
        docker login -u $GITLAB_USER -p $GITLAB_PERSONAL_ACCESS_TOKEN $GITLAB_REGISTRY_IMAGE;
        docker pull $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:$IMAGE_TAG || true;
        docker build --cache-from $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:$IMAGE_TAG --tag $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:$IMAGE_TAG --file ./Dockerfile.prod ".";
        docker push $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:$IMAGE_TAG;
      script: |
        docker network create -d bridge flask-tdd-net;
        docker run -d --name db -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=users -p 5432:5432 --network=flask-tdd-net postgres:12-alpine;
        docker run -d --name app -e "PORT=8765" -e "DATABASE_TEST_URL=postgres://postgres:postgres@db:5432/users" -p 5002:8765 --network=flask-tdd-net $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:$IMAGE_TAG;
        docker exec app python -m pytest "project/tests";
        docker exec app flake8 project;
        docker exec app black project --check;
        docker exec app isort project/**/*.py --check-only;
      after_success: |
        docker container stop $(docker container ls -aq);

    - stage: Deploy to Heroku
      script: |
        echo "Deploying to Heroku. No tests.";
      after_success: |
        docker build --tag $HEROKU_REGISTRY_IMAGE --file ./Dockerfile.prod ".";
        docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com;
        docker push $HEROKU_REGISTRY_IMAGE;
        chmod +x ./release.sh;
        ./release.sh;
