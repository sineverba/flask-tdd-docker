dist: bionic

os: linux

language: python

services:
  - docker
  - postgresql

branches:
  only:
    - master
    - develop

env:
  DOCKER_COMPOSE_VERSION: 1.25.4
  IMAGE_NAME: flask-tdd-docker
  GITLAB_REGISTRY_IMAGE: registry.gitlab.com
  HEROKU_REGISTRY_IMAGE: registry.heroku.com/$HEROKU_APP_NAME/web
  DATABASE_URL: postgres://postgres@127.0.0.1:5432/users


before_install:

before_script:
  #- rm Dockerfile
  #- cp Dockerfile.travis Dockerfile
  #- rm Dockerfile.travis
  #- docker-compose up -d --build
  # Create the database
  - psql -c 'create database users;' -U postgres

  - docker login -u $GITLAB_USER -p $GITLAB_PERSONAL_ACCESS_TOKEN $GITLAB_REGISTRY_IMAGE
  - docker pull $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:latest || true
  #- docker build 
  #    --cache-from $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:latest
  #    --tag $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:latest 
  #    --file ./Dockerfile.prod "."
  #- docker push $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:latest

script:
  # export DATABASE_URL=postgresql://foo:bar@ec2-107-20-230-70.compute-1.amazonaws.com:5432/datn10dvjpjut9
  # docker run --name flask-tdd -e "PORT=8765" -p 5002:8765 registry.heroku.com/thawing-savannah-60405/web:latest
  - docker run -d --name flask-tdd -e "PORT=8765" -e DATABASE_URL=$DATABASE_URL -p 5002:8765 $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:latest
  - docker exec flask-tdd python -m pytest "project/tests"
  - docker exec flask-tdd black project
  - docker exec flask-tdd flake8 project
  # - echo "no test!"
  

after_success:
  - docker container stop $(docker container ls -aq)
  #- docker-compose exec -e TRAVIS -e TRAVIS_JOB_ID -e TRAVIS_BRANCH -e TRAVIS_PULL_REQUEST users coveralls
  #- docker-compose exec -e TRAVIS -e TRAVIS_JOB_ID -e TRAVIS_BRANCH -e TRAVIS_PULL_REQUEST users codecov --token=${CODECOV_TOKEN}
  # Build the image, only in master
  #- test $TRAVIS_BRANCH = 'master'
  - if [[ $TRAVIS_BRANCH == "master" ]] && [[ $TRAVIS_PULL_REQUEST == "false" ]]; then
      docker build --tag $HEROKU_REGISTRY_IMAGE --file ./Dockerfile.prod ".";
      docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com;
      docker push $HEROKU_REGISTRY_IMAGE;
      chmod +x ./release.sh;
      ./release.sh;
    fi


after_script:
  #- docker-compose down