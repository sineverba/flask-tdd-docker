dist: bionic

os: linux

language: python

services:
  - docker

branches:
  only:
    - master
    - develop

env:
  DOCKER_COMPOSE_VERSION: 1.25.4
  IMAGE_NAME: flask-tdd-docker
  GITLAB_REGISTRY_IMAGE: registry.gitlab.com
  HEROKU_REGISTRY_IMAGE: registry.heroku.com/$HEROKU_APP_NAME/web


before_install:

before_script:
  #- rm Dockerfile
  #- cp Dockerfile.travis Dockerfile
  #- rm Dockerfile.travis
  #- docker-compose up -d --build
  # Create the database
  #- psql -c 'create database users;' -U postgres

  - docker login -u $GITLAB_USER -p $GITLAB_PERSONAL_ACCESS_TOKEN $GITLAB_REGISTRY_IMAGE
  #- docker pull $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:latest || true
  #- docker build 
  #    --cache-from $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:latest
  #    --tag $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:latest 
  #    --file ./Dockerfile.prod "."
  #- docker push $GITLAB_REGISTRY_IMAGE/$GITLAB_PROJECT_NAMESPACE/$GITLAB_PROJECT_NAME:latest

script:
  - docker network create -d bridge flask-tdd-net
  - docker run -d --name db -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=users -p 5432:5432 --network=flask-tdd-net postgres:latest
  - docker run -d --name app -e "PORT=8765" -p 5002:8765 -e "DATABASE_TEST_URL=postgres://postgres:postgres@db:5432/users" --network=flask-tdd-net registry.gitlab.com/sineverba/warehouse:latest
  - docker exec app python -m pytest "project/tests"
  - docker exec app flake8 project
  - docker exec app black project --check
  - docker exec app isort project/**/*.py --check-only -p no:warnings
    
  

after_success:
  - docker container stop $(docker container ls -aq)
  #- docker exec app -e TRAVIS -e TRAVIS_JOB_ID -e TRAVIS_BRANCH -e TRAVIS_PULL_REQUEST coveralls
  #- docker exec app -e TRAVIS -e TRAVIS_JOB_ID -e TRAVIS_BRANCH -e TRAVIS_PULL_REQUEST codecov --token=${CODECOV_TOKEN}
  # Build the image, only in master
  #- test $TRAVIS_BRANCH = 'master'
  - if [[ $TRAVIS_BRANCH == "master" ]] && [[ $TRAVIS_PULL_REQUEST == "false" ]]; then
      docker build --tag $HEROKU_REGISTRY_IMAGE --file ./Dockerfile.prod ".";
      docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com;
      docker push $HEROKU_REGISTRY_IMAGE;
      chmod +x ./release.sh;
      ./release.sh;
    fi


after_script:
  #- docker-compose down